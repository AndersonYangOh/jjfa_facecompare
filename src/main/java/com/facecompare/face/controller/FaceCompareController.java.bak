package com.tt.face.controller;

import java.util.concurrent.Callable;

import org.apache.commons.io.FileUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.seetaface2.model.FaceLandmark;
import com.tt.face.common.CommonCode;
import com.tt.face.common.ExceptionCast;
import com.tt.face.common.ResponseResult;
import com.tt.face.common.TTFaceException;
import com.tt.face.common.TTFaceHelper;
import com.tt.face.common.TTFaceResult;
import com.tt.face.service.TTFaceService;
import com.tt.face.utils.DeleteFileUtil;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@Api(value = "人脸AI系统接口",tags = "人脸AI系统接口")
@RestController
public class FaceCompareController {
	
	
	@Autowired
	TTFaceService ttFaceService;
	
	
	final static Logger logger = LogManager.getLogger(TTFaceController.class);

	@CrossOrigin
	@GetMapping("/quick")
	public ResponseResult quick() throws Exception{
		logger.info("测试一下");

		//ExceptionCast.cast(CommonCode.DETECT_FAIL);
		/*if(1 == 1)
		   throw new HttpMessageNotReadableException("测试一下自定义");*/
		  try {
		     	ExceptionCast.cast(CommonCode.FACE_UPLOAD_LIMIT_FAIL);
	     } catch (Exception e) {
	    	 e.printStackTrace();
	    	 if(e instanceof TTFaceException)
		    	ExceptionCast.cast(((TTFaceException)e).getResultCode());
		     throw e;
		  }
	   
		return new ResponseResult(CommonCode.SUCCESS);
	}
	
	@CrossOrigin
	@GetMapping("/clearinit")
    public void cleanInit() {

        try {
        	ttFaceService.clearInit();
	    } catch (Exception e) {
	    	e.printStackTrace();
	    	logger.error("ttface cleanInit file： " + "is errror");
	    }
      
    }
	
	
	@CrossOrigin
	@PostMapping("/updateface")
    public ResponseResult updateFace(@RequestParam("file") MultipartFile file,@RequestParam("id") String id) throws Exception {
		
		ResponseResult rr = null;
        rr = ttFaceService.updateFace(file, id);
    	return  rr;
	 
      
    }
	 
	@ApiOperation(value = "用户注册")
	@ApiImplicitParams({@ApiImplicitParam(name = "file", value = "文件流对象", required = true,dataType = "__File"),
        @ApiImplicitParam(name = "userjson", value = "注册表单json数据", required = true)})
	@ApiResponses({@ApiResponse(code=10000,message="操作成功"),
		@ApiResponse(code=10003,message="参数非法"),
		@ApiResponse(code=11111,message="操作失败"),
        @ApiResponse(code=20001,message="个人信息已经注册"),
        @ApiResponse(code=20002,message="个人注册失败"),
        @ApiResponse(code=20010,message="人脸图片上传失败"),
        @ApiResponse(code=99999,message="系统出错")
         })
	@CrossOrigin
	@PostMapping("/register")
    public ResponseResult<TTFaceResult> register(@RequestParam("file") MultipartFile file,@RequestParam("userjson") String userstr) throws Exception {
		    ResponseResult<TTFaceResult> rr = null;
        	rr = ttFaceService.register(file, userstr);
    	    return  rr;
     
    }
	
		@ApiOperation(value = "用户注册")
		@ApiImplicitParams({@ApiImplicitParam(name = "fileBase64", value = "文件base64编码", required = true),
	        @ApiImplicitParam(name = "userjson", value = "注册表单json数据", required = true)})
		@ApiResponses({@ApiResponse(code=10000,message="操作成功"),
			@ApiResponse(code=10003,message="参数非法"),
			@ApiResponse(code=11111,message="操作失败"),
	        @ApiResponse(code=20001,message="个人信息已经注册"),
	        @ApiResponse(code=20002,message="个人注册失败"),
	        @ApiResponse(code=20010,message="人脸图片上传失败"),
	        @ApiResponse(code=99999,message="系统出错")
	         })
		@CrossOrigin
		@PostMapping("/registerbyfilebase64")
	    public ResponseResult<TTFaceResult> registerByFileBase64(String fileBase64,@RequestParam("userjson") String userstr) throws Exception {
			ResponseResult<TTFaceResult> rr = null;
	        rr = ttFaceService.registerByFileBase64(fileBase64,userstr);
	    	return  rr;
		         
	    }
	
	
	
	/*@PostMapping("/upload")
    @ResponseBody
    public String upload(@RequestParam("file") MultipartFile[] files) {
        if (files.length == 0) {
            return "上传失败，请选择文件";
        }
        
        String fileName = "";
        String filePath = "D:\\faceybs\\";
        try {
	        for(MultipartFile file:files){
		        fileName = file.getOriginalFilename();
		        File dest = new File(filePath + fileName);
		        file.transferTo(dest);
	        }
	        return "上传成功";
	    } catch (IOException e) {
	    	e.printStackTrace();   
	    }
	    return "上传失败！";
      
    }*/
	
		
	
  static class FileData implements Callable<Boolean> {

	    private String srcPath;
	    
	    private String destPath;

	    public FileData(String srcPath,String destPath){
	        this.srcPath = srcPath;
	        this.destPath = destPath;
	    }

	    @Override
	    public Boolean call() throws Exception {
	        //真实的业务逻辑
	        //System.out.println("delete src file ： " + srcPath);
	        logger.info("delete src file ： " + srcPath);
	        boolean srcResult = DeleteFileUtil.delete(srcPath);
	        if(!srcResult){
	        	Thread.sleep(2000);
	        	srcResult = DeleteFileUtil.delete(srcPath);
	        }
	        if(!srcResult){
	        	Thread.sleep(2000);
	        	srcResult = DeleteFileUtil.delete(srcPath);
	        }
	        boolean destResult = false;
	        if(!StringUtils.isEmpty(destPath)){
		        logger.info("delete dest file ： " + destPath);
		        destResult =DeleteFileUtil.delete(destPath);
		        if(!destResult){
		        	Thread.sleep(2000);
		        	destResult = DeleteFileUtil.delete(destPath);
		        }
		        if(!destResult){
		        	Thread.sleep(2000);
		        	destResult = DeleteFileUtil.delete(destPath);
		        }
	        }
	        
	        return srcResult && destResult;
	    }
	 }
	/*
	@PostMapping("/facecompare")
    public ResponseResult faceCompare(@RequestParam("file") MultipartFile multifile,String userid) {
        if (multifile.isEmpty()) {
        	logger.info("ttface compare file ： " + "is empty");
            return new ResponseResult(CommonCode.FAIL);
        }
        
        String filePathSrc = "D:\\faceybs\\";
        Calendar calendar = Calendar.getInstance();
        int year = calendar.get(Calendar.YEAR);
        int month = calendar.get(Calendar.MONTH)+1;
        int date = calendar.get(Calendar.DATE);
        String filePath = filePathSrc + year + File.separator + month + File.separator + date + File.separator;
        logger.info("ttface compare filePath ： " + filePath);

        String fileName = multifile.getOriginalFilename();
        String fileFix = fileName.substring(fileName.lastIndexOf(".") + 1);
        File file = new File(filePath + userid + System.currentTimeMillis() +  "." + fileFix);
        try {
        	TTFileUtils.multipartFile2File(multifile, file);
        	float data = FaceHelper.compare(file, new File(filePathSrc + userid+  "." + fileFix));
        	BigDecimal dataBigDec = new BigDecimal(Float.toString(data));    
        	BigDecimal lineBigDec = new BigDecimal("0.7");    
        	int result = dataBigDec.compareTo(lineBigDec);
        	logger.info("ttface compare file result ： " + result);

        	TTFaceResult fr = new TTFaceResult(CommonCode.SUCCESS,String.valueOf(data),String.valueOf(result));
        	try {
		        	FutureTask<Boolean> future = new FutureTask<Boolean>(new FileData(file.getAbsolutePath(),""));
		    		future.run();
        	} catch (Exception e) {
    	    	e.printStackTrace();   
    	    }
    		return fr;
	    } catch (Exception e) {
	    	e.printStackTrace();   
	    }
	    return new ResponseResult(CommonCode.FAIL);
      
    }*/
    @ApiOperation(value = "人脸比对")
    @ApiResponses({@ApiResponse(code=10000,message="操作成功"),
		@ApiResponse(code=10003,message="参数非法"),
		@ApiResponse(code=11111,message="操作失败"),
        @ApiResponse(code=99999,message="系统出错")
       })
    @CrossOrigin
	@PostMapping("/facecompare2")
    public ResponseResult<TTFaceResult> faceCompare2(@RequestParam("srcfile") MultipartFile srcMultifile,@RequestParam("destfile") MultipartFile destMultifile) throws Exception {
		    ResponseResult<TTFaceResult> rr = null;
         	rr = ttFaceService.faceCompare2(srcMultifile,destMultifile);
    	    return  rr;
	        
    }
  
    @ApiOperation(value = "人脸搜索")
    @ApiImplicitParams({@ApiImplicitParam(name = "file", value = "文件流对象", required = true,dataType = "__File")})
	@ApiResponses({@ApiResponse(code=10000,message="操作成功"),
		@ApiResponse(code=10003,message="参数非法"),
		@ApiResponse(code=11111,message="操作失败"),
        @ApiResponse(code=99999,message="系统出错")
         })
    @CrossOrigin
	@PostMapping("/facesearch")
    public ResponseResult<TTFaceResult> faceSearch(@RequestParam("file") MultipartFile multifile) throws Exception {
		ResponseResult<TTFaceResult> rr = null;
        rr = ttFaceService.faceSearch(multifile);
    	return  rr;
	         
    }
    
    @ApiOperation(value = "人脸Base64搜索")
    @ApiImplicitParams({@ApiImplicitParam(name = "fileBase64", value = "文件Base64字符串", required = true)})
	@ApiResponses({@ApiResponse(code=10000,message="操作成功"),
		@ApiResponse(code=10003,message="参数非法"),
		@ApiResponse(code=11111,message="操作失败"),
        @ApiResponse(code=99999,message="系统出错")
         })
    @CrossOrigin
	@PostMapping("/facesearchbyfilebase64")
    public ResponseResult<TTFaceResult> faceSearchByFileBase64(String fileBase64) throws Exception {
		ResponseResult<TTFaceResult> rr = null;
        rr = ttFaceService.faceSearchByFileBase64(fileBase64);
    	return  rr;
	         
    }
	
    @ApiOperation(value = "人脸检测")
	@ApiResponses({@ApiResponse(code=10000,message="操作成功"),
		@ApiResponse(code=10003,message="参数非法"),
		@ApiResponse(code=11111,message="操作失败"),
        @ApiResponse(code=99999,message="系统出错")
         })
    @CrossOrigin
	@PostMapping("/detectlandmark")
    public ResponseResult<FaceLandmark>  detectLandmark(@RequestParam("file") MultipartFile multifile,String id) throws Exception {
		   ResponseResult<FaceLandmark>  rr = null;
        	rr = ttFaceService.detectLandmark(multifile, id);
    	    return  rr;
      
    }
	
	

}
